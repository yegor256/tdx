#!/usr/bin/env ruby
# encoding: utf-8
#
# Copyright (c) 2017 Yegor Bugayenko
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the 'Software'), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

STDOUT.sync = true

require 'slop'
require 'tdx'

args = ARGV

opts = Slop.parse(args, strict: true, help: true) do
  banner "Usage (#{TDX::VERSION}): tdx [options]"
  on('version', 'Show current version')
  on(
    'r',
    'repo',
    'Repository URI, e.g. "git@github.com:yegor256/tdx.git"',
    type: String,
    argument: :required,
    limit: 1
  )
  on(
    'tests',
    'Comma-separated list of relative paths with test-related files',
    type: String,
    argument: :required,
    limit: 1
  )
  on(
    'login',
    'GitHub login',
    argument: :required,
    type: String,
    limit: 1
  )
  on(
    'password',
    'GitHub password',
    argument: :required,
    type: String,
    limit: 1
  )
  on(
    's',
    'svg',
    'Full path of the SVG file to generate (STDOUT otherwise)',
    argument: :required,
    type: String,
    limit: 1
  )
end

if opts.help?
  puts opts
  exit
end

if opts.version?
  puts TDX::VERSION
  exit
end

Encoding.default_external = Encoding::UTF_8
Encoding.default_internal = Encoding::UTF_8
output = TDX::Base.new(opts).svg
if opts[:svg]
  File.new(opts[:svg], 'w') << output
else
  puts output
end
